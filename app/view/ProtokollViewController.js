/*
 * File: app/view/ProtokollViewController.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hurricane.view.ProtokollViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.protokoll',

    onComboboxChange2: function(field, newValue, oldValue, eOpts) {
        var form =  Ext.getCmp('frmInputProtokoll');
        if (newValue == 9 ) {
            form.getForm().findField("AufnahmeKTW").show();
        } else {
            form.getForm().findField("AufnahmeKTW").hide();
        }
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var form =  Ext.getCmp('frmInputProtokoll');
        if (form && newValue == 3) {
            form.getForm().findField("AbgangUebergabe").show();
            form.getForm().findField("AbgangZiel").show();
        } else {
            form.getForm().findField("AbgangUebergabe").hide();
            form.getForm().findField("AbgangZiel").hide();
        }
    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        var form =  Ext.getCmp('frmInputProtokoll');
        if (newValue == 5 || newValue == 12 || newValue == 28) {
            form.getForm().findField("DiagnoseSonstiges").show();
        } else {
            form.getForm().findField("DiagnoseSonstiges").hide();
        }
    },

    save1: function(button, e, eOpts) {
        var form         = this.getReferences().form.getForm(),
            store        = Ext.getStore('Protokoll');

        form.updateRecord();




        console.log(form);
        //console.log(values);
        //console.log(record);

        //store.insert(0, values.data );
        //store.add(Ext.create('hurricane.model.Protokoll'));
        store.add(form.getRecord());
        //console.log(store);

        /**


        var form = this.getReferences().form.getForm(),
        record = form.getRecord(),
        store = this.getStore('Protokoll');

        console.log(form);
        //console.log(record);
        //console.log(store);


        // Valid
        if (form.isValid()) {

            // Update associated record with values
            form.updateRecord();

            // Add to store if new record
            if (record.phantom) {

                // TODO: Assign the record's ID from data source
                // Normally, this value would be auto-generated,
                // or returned from the server
                var id = store.count() + 1;
                record.set('DiagnoseID', id);

                // Add to store
                store.add(record);

            }

            // Commit changes
            store.commitChanges();

            // Display record
            this.select(this, record);

        }*/
    },

    cancelEdit1: function(button, e, eOpts) {
        // Show details
        //this.showView('details');
        console.log(e);
        console.log(eOpts);
    }

});
